#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Jul  2 15:47:38 2010

import wx

# begin wxGlade: extracode
from wx_opencv import OpenCVImage
# end wxGlade



class TrainerFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TrainerFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.trainer_statusbar = self.CreateStatusBar(1, 0)
        self.label_1 = wx.StaticText(self, -1, "Class Name:")
        self.name_ctrl = wx.TextCtrl(self, -1, "")
        self.start_training_button = wx.Button(self, -1, "S&tart Training")
        self.cancel_training_button = wx.Button(self, -1, "Cancel Training")
        self.save_model_button = wx.Button(self, -1, "&Save Model")
        self.image = OpenCVImage(self, -1, style=wx.TAB_TRAVERSAL)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.startTraining, self.start_training_button)
        self.Bind(wx.EVT_BUTTON, self.cancelTraining, self.cancel_training_button)
        self.Bind(wx.EVT_BUTTON, self.saveModel, self.save_model_button)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: TrainerFrame.__set_properties
        self.SetTitle("Trainer")
        self.trainer_statusbar.SetStatusWidths([-1])
        # statusbar fields
        trainer_statusbar_fields = ["Status bar"]
        for i in range(len(trainer_statusbar_fields)):
            self.trainer_statusbar.SetStatusText(trainer_statusbar_fields[i], i)
        self.name_ctrl.SetToolTipString("The name of the class for which to train a new model.")
        self.start_training_button.SetToolTipString("Press this button to start training the new class. After the button is pressed the training mode is activated and each message published on the input topic will be used for training.")
        self.save_model_button.SetToolTipString("Press this button to save the trained model.")
        self.image.SetToolTipString("Current training image.")
        self.image.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TrainerFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.name_ctrl, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(self.start_training_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(self.cancel_training_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_2.Add(self.save_model_button, 0, wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(sizer_2, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sizer_1.Add(self.image, 1, wx.SHAPED, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def startTraining(self, event): # wxGlade: TrainerFrame.<event_handler>
        print "Event handler `startTraining' not implemented!"
        event.Skip()

    def cancelTraining(self, event): # wxGlade: TrainerFrame.<event_handler>
        print "Event handler `cancelTraining' not implemented!"
        event.Skip()

    def saveModel(self, event): # wxGlade: TrainerFrame.<event_handler>
        print "Event handler `saveModel' not implemented!"
        event.Skip()

# end of class TrainerFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    trainer = TrainerFrame(None, -1, "")
    app.SetTopWindow(trainer)
    trainer.Show()
    app.MainLoop()
