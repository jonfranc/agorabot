/* Auto-generated by genmsg_cpp for file /home/magnate/ros/nodelet_core/nodelet/srv/NodeletList.srv */
#ifndef NODELET_SERVICE_NODELETLIST_H
#define NODELET_SERVICE_NODELETLIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace nodelet
{
template <class ContainerAllocator>
struct NodeletListRequest_ {
  typedef NodeletListRequest_<ContainerAllocator> Type;

  NodeletListRequest_()
  {
  }

  NodeletListRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "nodelet/NodeletListRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "99c7b10e794f5600b8030e697e946ca7"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::nodelet::NodeletListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodelet::NodeletListRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NodeletListRequest
typedef  ::nodelet::NodeletListRequest_<std::allocator<void> > NodeletListRequest;

typedef boost::shared_ptr< ::nodelet::NodeletListRequest> NodeletListRequestPtr;
typedef boost::shared_ptr< ::nodelet::NodeletListRequest const> NodeletListRequestConstPtr;


template <class ContainerAllocator>
struct NodeletListResponse_ {
  typedef NodeletListResponse_<ContainerAllocator> Type;

  NodeletListResponse_()
  : nodelets()
  {
  }

  NodeletListResponse_(const ContainerAllocator& _alloc)
  : nodelets(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _nodelets_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  nodelets;


  ROS_DEPRECATED uint32_t get_nodelets_size() const { return (uint32_t)nodelets.size(); }
  ROS_DEPRECATED void set_nodelets_size(uint32_t size) { nodelets.resize((size_t)size); }
  ROS_DEPRECATED void get_nodelets_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->nodelets; }
  ROS_DEPRECATED void set_nodelets_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->nodelets = vec; }
private:
  static const char* __s_getDataType_() { return "nodelet/NodeletListResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "99c7b10e794f5600b8030e697e946ca7"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "99c7b10e794f5600b8030e697e946ca7"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string[] nodelets\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, nodelets);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, nodelets);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(nodelets);
    return size;
  }

  typedef boost::shared_ptr< ::nodelet::NodeletListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodelet::NodeletListResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NodeletListResponse
typedef  ::nodelet::NodeletListResponse_<std::allocator<void> > NodeletListResponse;

typedef boost::shared_ptr< ::nodelet::NodeletListResponse> NodeletListResponsePtr;
typedef boost::shared_ptr< ::nodelet::NodeletListResponse const> NodeletListResponseConstPtr;

struct NodeletList
{

typedef NodeletListRequest Request;
typedef NodeletListResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct NodeletList
} // namespace nodelet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletListRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletListRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nodelet::NodeletListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::nodelet::NodeletListRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::nodelet::NodeletListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletListRequest";
  }

  static const char* value(const  ::nodelet::NodeletListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nodelet::NodeletListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::nodelet::NodeletListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nodelet::NodeletListRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletListResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletListResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nodelet::NodeletListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99c7b10e794f5600b8030e697e946ca7";
  }

  static const char* value(const  ::nodelet::NodeletListResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x99c7b10e794f5600ULL;
  static const uint64_t static_value2 = 0xb8030e697e946ca7ULL;
};

template<class ContainerAllocator>
struct DataType< ::nodelet::NodeletListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletListResponse";
  }

  static const char* value(const  ::nodelet::NodeletListResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nodelet::NodeletListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] nodelets\n\
\n\
\n\
";
  }

  static const char* value(const  ::nodelet::NodeletListResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nodelet::NodeletListRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NodeletListRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nodelet::NodeletListResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.nodelets);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NodeletListResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nodelet::NodeletList> {
  static const char* value() 
  {
    return "99c7b10e794f5600b8030e697e946ca7";
  }

  static const char* value(const nodelet::NodeletList&) { return value(); } 
};

template<>
struct DataType<nodelet::NodeletList> {
  static const char* value() 
  {
    return "nodelet/NodeletList";
  }

  static const char* value(const nodelet::NodeletList&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nodelet::NodeletListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99c7b10e794f5600b8030e697e946ca7";
  }

  static const char* value(const nodelet::NodeletListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nodelet::NodeletListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletList";
  }

  static const char* value(const nodelet::NodeletListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nodelet::NodeletListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99c7b10e794f5600b8030e697e946ca7";
  }

  static const char* value(const nodelet::NodeletListResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nodelet::NodeletListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletList";
  }

  static const char* value(const nodelet::NodeletListResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NODELET_SERVICE_NODELETLIST_H

