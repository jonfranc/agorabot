/* Auto-generated by genmsg_cpp for file /home/magnate/ros/nodelet_core/nodelet/srv/NodeletLoad.srv */
#ifndef NODELET_SERVICE_NODELETLOAD_H
#define NODELET_SERVICE_NODELETLOAD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace nodelet
{
template <class ContainerAllocator>
struct NodeletLoadRequest_ {
  typedef NodeletLoadRequest_<ContainerAllocator> Type;

  NodeletLoadRequest_()
  : name()
  , type()
  , remap_source_args()
  , remap_target_args()
  , my_argv()
  , bond_id()
  {
  }

  NodeletLoadRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , type(_alloc)
  , remap_source_args(_alloc)
  , remap_target_args(_alloc)
  , my_argv(_alloc)
  , bond_id(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _remap_source_args_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  remap_source_args;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _remap_target_args_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  remap_target_args;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _my_argv_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  my_argv;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bond_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  bond_id;


  ROS_DEPRECATED uint32_t get_remap_source_args_size() const { return (uint32_t)remap_source_args.size(); }
  ROS_DEPRECATED void set_remap_source_args_size(uint32_t size) { remap_source_args.resize((size_t)size); }
  ROS_DEPRECATED void get_remap_source_args_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->remap_source_args; }
  ROS_DEPRECATED void set_remap_source_args_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->remap_source_args = vec; }
  ROS_DEPRECATED uint32_t get_remap_target_args_size() const { return (uint32_t)remap_target_args.size(); }
  ROS_DEPRECATED void set_remap_target_args_size(uint32_t size) { remap_target_args.resize((size_t)size); }
  ROS_DEPRECATED void get_remap_target_args_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->remap_target_args; }
  ROS_DEPRECATED void set_remap_target_args_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->remap_target_args = vec; }
  ROS_DEPRECATED uint32_t get_my_argv_size() const { return (uint32_t)my_argv.size(); }
  ROS_DEPRECATED void set_my_argv_size(uint32_t size) { my_argv.resize((size_t)size); }
  ROS_DEPRECATED void get_my_argv_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->my_argv; }
  ROS_DEPRECATED void set_my_argv_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->my_argv = vec; }
private:
  static const char* __s_getDataType_() { return "nodelet/NodeletLoadRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c6e28cc4d2e259249d96cfb50658fbec"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8cfbf33bf3fbd4c54a833f6e2b105331"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string name\n\
string type\n\
string[] remap_source_args\n\
string[] remap_target_args\n\
string[] my_argv\n\
\n\
string bond_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, type);
    ros::serialization::serialize(stream, remap_source_args);
    ros::serialization::serialize(stream, remap_target_args);
    ros::serialization::serialize(stream, my_argv);
    ros::serialization::serialize(stream, bond_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, type);
    ros::serialization::deserialize(stream, remap_source_args);
    ros::serialization::deserialize(stream, remap_target_args);
    ros::serialization::deserialize(stream, my_argv);
    ros::serialization::deserialize(stream, bond_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(type);
    size += ros::serialization::serializationLength(remap_source_args);
    size += ros::serialization::serializationLength(remap_target_args);
    size += ros::serialization::serializationLength(my_argv);
    size += ros::serialization::serializationLength(bond_id);
    return size;
  }

  typedef boost::shared_ptr< ::nodelet::NodeletLoadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodelet::NodeletLoadRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NodeletLoadRequest
typedef  ::nodelet::NodeletLoadRequest_<std::allocator<void> > NodeletLoadRequest;

typedef boost::shared_ptr< ::nodelet::NodeletLoadRequest> NodeletLoadRequestPtr;
typedef boost::shared_ptr< ::nodelet::NodeletLoadRequest const> NodeletLoadRequestConstPtr;


template <class ContainerAllocator>
struct NodeletLoadResponse_ {
  typedef NodeletLoadResponse_<ContainerAllocator> Type;

  NodeletLoadResponse_()
  : success(false)
  {
  }

  NodeletLoadResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "nodelet/NodeletLoadResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "8cfbf33bf3fbd4c54a833f6e2b105331"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::nodelet::NodeletLoadResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodelet::NodeletLoadResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NodeletLoadResponse
typedef  ::nodelet::NodeletLoadResponse_<std::allocator<void> > NodeletLoadResponse;

typedef boost::shared_ptr< ::nodelet::NodeletLoadResponse> NodeletLoadResponsePtr;
typedef boost::shared_ptr< ::nodelet::NodeletLoadResponse const> NodeletLoadResponseConstPtr;

struct NodeletLoad
{

typedef NodeletLoadRequest Request;
typedef NodeletLoadResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct NodeletLoad
} // namespace nodelet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletLoadRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletLoadRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nodelet::NodeletLoadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6e28cc4d2e259249d96cfb50658fbec";
  }

  static const char* value(const  ::nodelet::NodeletLoadRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc6e28cc4d2e25924ULL;
  static const uint64_t static_value2 = 0x9d96cfb50658fbecULL;
};

template<class ContainerAllocator>
struct DataType< ::nodelet::NodeletLoadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletLoadRequest";
  }

  static const char* value(const  ::nodelet::NodeletLoadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nodelet::NodeletLoadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string type\n\
string[] remap_source_args\n\
string[] remap_target_args\n\
string[] my_argv\n\
\n\
string bond_id\n\
\n\
";
  }

  static const char* value(const  ::nodelet::NodeletLoadRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletLoadResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nodelet::NodeletLoadResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nodelet::NodeletLoadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::nodelet::NodeletLoadResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::nodelet::NodeletLoadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletLoadResponse";
  }

  static const char* value(const  ::nodelet::NodeletLoadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nodelet::NodeletLoadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::nodelet::NodeletLoadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::nodelet::NodeletLoadResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nodelet::NodeletLoadRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.type);
    stream.next(m.remap_source_args);
    stream.next(m.remap_target_args);
    stream.next(m.my_argv);
    stream.next(m.bond_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NodeletLoadRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nodelet::NodeletLoadResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NodeletLoadResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<nodelet::NodeletLoad> {
  static const char* value() 
  {
    return "8cfbf33bf3fbd4c54a833f6e2b105331";
  }

  static const char* value(const nodelet::NodeletLoad&) { return value(); } 
};

template<>
struct DataType<nodelet::NodeletLoad> {
  static const char* value() 
  {
    return "nodelet/NodeletLoad";
  }

  static const char* value(const nodelet::NodeletLoad&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nodelet::NodeletLoadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8cfbf33bf3fbd4c54a833f6e2b105331";
  }

  static const char* value(const nodelet::NodeletLoadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nodelet::NodeletLoadRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletLoad";
  }

  static const char* value(const nodelet::NodeletLoadRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<nodelet::NodeletLoadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8cfbf33bf3fbd4c54a833f6e2b105331";
  }

  static const char* value(const nodelet::NodeletLoadResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<nodelet::NodeletLoadResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nodelet/NodeletLoad";
  }

  static const char* value(const nodelet::NodeletLoadResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NODELET_SERVICE_NODELETLOAD_H

